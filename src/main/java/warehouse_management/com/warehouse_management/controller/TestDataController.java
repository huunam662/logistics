package warehouse_management.com.warehouse_management.controller;

import com.github.javafaker.Faker;
import com.mongodb.lang.Nullable;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import warehouse_management.com.warehouse_management.enumerate.*;
import warehouse_management.com.warehouse_management.model.Container;
import warehouse_management.com.warehouse_management.model.InventoryItem;
import warehouse_management.com.warehouse_management.model.Warehouse;
import warehouse_management.com.warehouse_management.repository.ContainerRepository;
import warehouse_management.com.warehouse_management.repository.InventoryItemRepository;
import warehouse_management.com.warehouse_management.repository.WarehouseRepository;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Year;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.UUID;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/dev")
public class TestDataController {
    @Autowired
    private MongoTemplate mongoTemplate;
    private final WarehouseRepository warehouseRepository;
    private final ContainerRepository containerRepository;
    private final InventoryItemRepository inventoryItemRepository;
    private final Faker faker = new Faker(new Locale("vi"));

    public TestDataController(WarehouseRepository warehouseRepository, ContainerRepository containerRepository, InventoryItemRepository inventoryItemRepository) {
        this.warehouseRepository = warehouseRepository;
        this.containerRepository = containerRepository;
        this.inventoryItemRepository = inventoryItemRepository;
    }

    private record InitDataRequest(boolean isDrop) {
    }

    @PostMapping("/init-data")
    public ResponseEntity<String> createFakeData(@Nullable @RequestBody InitDataRequest request) {
        // N·∫øu isDrop == true th√¨ x√≥a d·ªØ li·ªáu
        if (request != null && request.isDrop) {
            mongoTemplate.dropCollection("warehouse");
            mongoTemplate.dropCollection("container");
            mongoTemplate.dropCollection("inventory_item");
            System.out.println("üóë ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu trong 3 collections.");
        }
// 1. Check collection 'warehouse'
        if (!mongoTemplate.collectionExists("warehouse")) {
            mongoTemplate.createCollection("warehouse");
            System.out.println("‚úÖ Collection 'warehouse' ƒë√£ ƒë∆∞·ª£c t·∫°o.");
        } else {
            System.out.println("‚ÑπÔ∏è Collection 'warehouse' ƒë√£ t·ªìn t·∫°i.");
        }

// 2. Check collection 'container'
        if (!mongoTemplate.collectionExists("container")) {
            mongoTemplate.createCollection("container");
            System.out.println("‚úÖ Collection 'container' ƒë√£ ƒë∆∞·ª£c t·∫°o.");
        } else {
            System.out.println("‚ÑπÔ∏è Collection 'container' ƒë√£ t·ªìn t·∫°i.");
        }

// 3. Check collection 'inventoryItem'
        if (!mongoTemplate.collectionExists("inventory_item")) {
            mongoTemplate.createCollection("inventory_item");
            System.out.println("‚úÖ Collection 'inventoryItem' ƒë√£ ƒë∆∞·ª£c t·∫°o.");
        } else {
            System.out.println("‚ÑπÔ∏è Collection 'inventoryItem' ƒë√£ t·ªìn t·∫°i.");
        }
        List<Warehouse> warehouses = new ArrayList<>();
// ti·∫øng Vi·ªát n·∫øu mu·ªën

        for (int i = 1; i <= 5; i++) {
            String baseCode = String.format("%03d", i);
            String baseName = "Kho " + faker.address().cityName();
            String address = faker.address().fullAddress();
            String note = faker.book().title();

            // Ch·ªçn lo·∫°i kho ng·∫´u nhi√™n
            WarehouseType type = i % 2 == 0 ? WarehouseType.DESTINATION : WarehouseType.DEPARTURE;

            // T·∫°o kho con -XP
            warehouses.add(Warehouse.builder()
                    .name(baseName + " ‚Äì Xe & Ph·ª• ki·ªán")
                    .code(baseCode + "-XP")
                    .type(type.getId())
                    .status(ActiveStatus.ACTIVE.getId())
                    .address(address)
                    .note(note)
                    .build());

            // T·∫°o kho con -PT
            warehouses.add(Warehouse.builder()
                    .name(baseName + " ‚Äì Ph·ª• t√πng")
                    .code(baseCode + "-PT")
                    .type(type.getId())
                    .status(ActiveStatus.ACTIVE.getId())
                    .address(address)
                    .note(note)
                    .build());
        }

        warehouseRepository.saveAll(warehouses);


        // L·ªçc kho theo lo·∫°i
        List<Warehouse> departureWarehouses = warehouses.stream()
                .filter(w -> WarehouseType.DEPARTURE.equals(w.getType()))
                .collect(Collectors.toList());



        List<Warehouse> destinationWarehouses = warehouses.stream()
                .filter(w -> WarehouseType.DESTINATION.equals(w.getType()))
                .collect(Collectors.toList());

// Ki·ªÉm tra ƒë·ªß kho ƒë·ªÉ t·∫°o container kh√¥ng
        if (departureWarehouses.isEmpty() || destinationWarehouses.isEmpty()) {
            throw new IllegalStateException("Kh√¥ng ƒë·ªß warehouse lo·∫°i DEPARTURE ho·∫∑c DESTINATION ƒë·ªÉ t·∫°o Container.");
        }

        List<Container> containers = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            Container c = new Container();
            c.setId(new ObjectId());

            // FORMAT: CONT-2024-002
            String code = String.format("CONT-%d-%03d", Year.now().getValue(), i + 1);
            c.setContainerCode(code);

            c.setContainerStatus(ContainerStatus.LOADING);
            c.setDepartureDate(LocalDateTime.now().minusDays(faker.number().numberBetween(1, 10)));
            c.setArrivalDate(LocalDateTime.now().plusDays(faker.number().numberBetween(1, 10)));

            // Ghi ch√∫ s√°t nghƒ©a h∆°n
            String[] notes = {
                    "ƒêang v·∫≠n chuy·ªÉn ƒë·∫øn kho ƒë√≠ch",
                    "Ch·ªù ch·∫•t h√†ng t·∫°i kho xu·∫•t",
                    "ƒê√£ kh·ªüi h√†nh, ƒëang tr√™n ƒë∆∞·ªùng",
                    "Ch∆∞a ho√†n th√†nh ki·ªÉm k√™",
                    "H√†ng ƒë√£ t·ªõi kho, ch·ªù nh·∫≠p kho"
            };
            c.setNote(notes[faker.random().nextInt(notes.length)]);

            // G√°n from/to warehouse theo ƒë√∫ng lo·∫°i
            Warehouse from = departureWarehouses.get(faker.random().nextInt(departureWarehouses.size()));
            Warehouse to = destinationWarehouses.get(faker.random().nextInt(destinationWarehouses.size()));
            c.setFromWareHouseId(from.getId());
            c.setToWarehouseId(to.getId());

            containers.add(c);
        }

        containerRepository.saveAll(containers);

        // 3. T·∫°o InventoryItems v·ªõi warehouse v√† container
        List<InventoryItem> items = new ArrayList<>();
        int currentYear = LocalDate.now().getYear();
        for (int i = 0; i < 20; i++) {
            InventoryItem item = new InventoryItem();
            item.setId(new ObjectId());
            String poNumber = String.format("PO-%s-%03d", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss")), i + 1);
            String productCode = String.format("PRC-%d-%03d", currentYear, i + 1);
            item.setPoNumber(poNumber);
            item.setProductCode(productCode);
            item.setInventoryType(InventoryType.PRODUCT_ACCESSORIES.getId());
            item.setQuantity(faker.number().numberBetween(i + 1, (i + 1) * 10));
            item.setSerialNumber("SERIAL_" + faker.number().digits(6));
            item.setModel("Model " + faker.letterify("M-???"));
            item.setType("Xe n√¢ng ƒëi·ªán");
            item.setCategory("Ng·ªìi l√°i");
            item.setManufacturingYear(2020 + faker.random().nextInt(5));
            item.setStatus(InventoryItemStatus.IN_STOCK);

            // G√°n warehouse/container ng·∫´u nhi√™n
            item.setWarehouseId(warehouses.get(faker.random().nextInt(warehouses.size())).getId());
            item.setContainerId(containers.get(faker.random().nextInt(containers.size())).getId());

            item.setInitialCondition("M·ªõi");
            String[] ghiChuMau = {
                    "H√†ng m·ªõi v·ªÅ, ch∆∞a ki·ªÉm tra",
                    "C·∫ßn ki·ªÉm tra th√¥ng s·ªë b√¨nh",
                    "Ch·ªù ki·ªÉm ƒë·ªãnh ch·∫•t l∆∞·ª£ng",
                    "H√†ng ƒë√£ b√°n, ch·ªù xu·∫•t kho",
                    "ƒê√£ qua s·ª≠ d·ª•ng, c·∫ßn b·∫£o d∆∞·ª°ng",
                    "S·∫£n ph·∫©m l·ªói nh·∫π, c·∫ßn s·ª≠a ch·ªØa",
                    "Thi·∫øt b·ªã c√≤n nguy√™n ƒëai ki·ªán",
                    "B·∫£o qu·∫£n trong kho m√°t",
                    "S·∫Øp h·∫øt h·∫°n b·∫£o h√†nh",
                    "Ph·ª• t√πng ƒëi k√®m ƒë·∫ßy ƒë·ªß"
            };

            item.setNotes(ghiChuMau[faker.random().nextInt(ghiChuMau.length)]);
            item.setIsDeleted(false);
            item.setCreatedAt(LocalDateTime.now());
            item.setUpdatedAt(LocalDateTime.now());

            items.add(item);
            // Specifications
            InventoryItem.Specifications specs = new InventoryItem.Specifications(
                    faker.number().numberBetween(1000, 5000), // liftingCapacityKg
                    "Khung " + faker.letterify("??"),         // chassisType
                    faker.number().numberBetween(2000, 7000), // liftingHeightMm
                    "ƒê·ªông c∆° " + faker.letterify("??"),       // engineType
                    "B√¨nh ƒëi·ªán " + faker.bothify("??-###"),   // batteryInfo
                    "Th√¥ng s·ªë b√¨nh " + faker.bothify("??-##"),// batterySpecification
                    "Th√¥ng s·ªë s·∫°c " + faker.bothify("??-##"), // chargerSpecification
                    faker.number().numberBetween(2, 6),       // valveCount
                    faker.bool().bool(),                      // hasSideShift
                    faker.lorem().sentence()                  // otherDetails
            );
            item.setSpecifications(specs);

// Pricing
            InventoryItem.Pricing pricing = new InventoryItem.Pricing(
                    BigDecimal.valueOf(faker.number().randomDouble(2, 100, 500)),  // purchasePrice
                    BigDecimal.valueOf(faker.number().randomDouble(2, 550, 650)),  // salePriceR0
                    BigDecimal.valueOf(faker.number().randomDouble(2, 700, 800)),  // salePriceR1
                    BigDecimal.valueOf(faker.number().randomDouble(2, 600, 900)),  // actualSalePrice
                    "ƒê·∫°i l√Ω " + faker.company().name()                             // agent
            );
            item.setPricing(pricing);

// Logistics
            InventoryItem.Logistics logistics = new InventoryItem.Logistics(
                    LocalDateTime.now().minusDays(faker.number().numberBetween(30, 60)), // orderDate
                    LocalDateTime.now().minusDays(faker.number().numberBetween(15, 29)), // departureDate
                    LocalDateTime.now().minusDays(faker.number().numberBetween(1, 14)),  // arrivalDate
                    faker.bool().bool() ? LocalDateTime.now().minusDays(faker.number().numberBetween(1, 10)) : null, // consignmentDate,
                    LocalDateTime.now().minusDays(faker.number().numberBetween(25, 50)), // plannedProductionDate
                    LocalDateTime.now().minusDays(faker.number().numberBetween(16, 28)) // estimateCompletionDate
            );
            item.setLogistics(logistics);
        }
        inventoryItemRepository.saveAll(items);

        return ResponseEntity.ok("‚úÖ ƒê√£ t·∫°o fake data: " +
                warehouses.size() + " warehouses, " +
                containers.size() + " containers, " +
                items.size() + " inventory items.");
    }


}
