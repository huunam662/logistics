package warehouse_management.com.warehouse_management.controller;

import com.github.javafaker.Faker;
import com.mongodb.lang.Nullable;
import io.swagger.v3.oas.annotations.Hidden;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import warehouse_management.com.warehouse_management.enumerate.*;
import warehouse_management.com.warehouse_management.model.Container;
import warehouse_management.com.warehouse_management.model.InventoryItem;
import warehouse_management.com.warehouse_management.model.Warehouse;
import warehouse_management.com.warehouse_management.repository.container.ContainerRepository;
import warehouse_management.com.warehouse_management.repository.inventory_item.InventoryItemRepository;
import warehouse_management.com.warehouse_management.repository.warehouse.WarehouseRepository;
import warehouse_management.com.warehouse_management.service.InventoryItemService;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Year;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Random;

@Hidden
@RestController
@RequestMapping("/dev")
public class TestDataController {
    @Autowired
    private MongoTemplate mongoTemplate;
    private final WarehouseRepository warehouseRepository;
    private final ContainerRepository containerRepository;
    private final InventoryItemRepository inventoryItemRepository;
    private final InventoryItemService inventoryItemService;
    private final Faker faker = new Faker(new Locale("vi"));

    public TestDataController(WarehouseRepository warehouseRepository, ContainerRepository containerRepository, InventoryItemRepository inventoryItemRepository, InventoryItemService inventoryItemService) {
        this.warehouseRepository = warehouseRepository;
        this.containerRepository = containerRepository;
        this.inventoryItemRepository = inventoryItemRepository;
        this.inventoryItemService = inventoryItemService;
    }

    private record InitDataRequest(boolean isDrop) {
    }

    @GetMapping("/test-audit")
    private ResponseEntity<?> testAudit(@RequestParam("val") Integer value ) {
        inventoryItemService.approve(value);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/init-data")
    public ResponseEntity<String> createFakeData(@Nullable @RequestBody InitDataRequest request) {
        // N·∫øu isDrop == true th√¨ x√≥a d·ªØ li·ªáu
        if (request != null && request.isDrop) {
            mongoTemplate.dropCollection("warehouse");
            mongoTemplate.dropCollection("container");
            mongoTemplate.dropCollection("inventory_item");
            System.out.println("üóë ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu trong 3 collections.");
        }
// 1. Check collection 'warehouse'
        if (!mongoTemplate.collectionExists("warehouse")) {
            mongoTemplate.createCollection("warehouse");
            System.out.println("‚úÖ Collection 'warehouse' ƒë√£ ƒë∆∞·ª£c t·∫°o.");
        } else {
            System.out.println("‚ÑπÔ∏è Collection 'warehouse' ƒë√£ t·ªìn t·∫°i.");
        }

// 2. Check collection 'container'
        if (!mongoTemplate.collectionExists("container")) {
            mongoTemplate.createCollection("container");
            System.out.println("‚úÖ Collection 'container' ƒë√£ ƒë∆∞·ª£c t·∫°o.");
        } else {
            System.out.println("‚ÑπÔ∏è Collection 'container' ƒë√£ t·ªìn t·∫°i.");
        }

// 3. Check collection 'inventoryItem'
        if (!mongoTemplate.collectionExists("inventory_item")) {
            mongoTemplate.createCollection("inventory_item");
            System.out.println("‚úÖ Collection 'inventoryItem' ƒë√£ ƒë∆∞·ª£c t·∫°o.");
        } else {
            System.out.println("‚ÑπÔ∏è Collection 'inventoryItem' ƒë√£ t·ªìn t·∫°i.");
        }
        List<Warehouse> warehouses = new ArrayList<>();
// ti·∫øng Vi·ªát n·∫øu mu·ªën

        for (int i = 1; i <= 30; i++) {
            String baseCode = String.format("%03d", i);
            String baseName = "Kho " + faker.address().cityName();
            String address = faker.address().fullAddress();
            String note = faker.book().title();

            // Ch·ªçn lo·∫°i kho ng·∫´u nhi√™n
            WarehouseType type;
            if(i < 8){
                type = WarehouseType.PRODUCTION;
            }
            else if(i < 15){
                type = WarehouseType.DEPARTURE;
            }
            else if(i < 23){
                type = WarehouseType.DESTINATION;
            }
            else{
                type = WarehouseType.CONSIGNMENT;
            }
            // T·∫°o kho con -XP
            warehouses.add(Warehouse.builder()
                    .name(baseName)
                    .code(baseCode)
                    .type(type.getId())
                    .status(ActiveStatus.ACTIVE.getId())
                    .address(address)
                    .note(note)
                    .build());

        }

        warehouseRepository.saveAll(warehouses);

        List<Warehouse> warehouseDestinations = warehouses.stream().filter(w -> w.getType().equals(WarehouseType.DESTINATION)).toList();

        // 3. T·∫°o InventoryItems v·ªõi warehouse v√† container
        List<Container> containers = new ArrayList<>();
        List<InventoryItem> items = new ArrayList<>();
        int currentYear = LocalDate.now().getYear();
        for(var warehouse : warehouses){
            if(warehouse.getType().equals(WarehouseType.DEPARTURE)){
                for (int i = 0; i < 5; i++) {
                    Container c = new Container();
                    c.setId(new ObjectId());
                    // FORMAT: CONT-2024-002
                    String code = String.format("CONT-%d-%d", Year.now().getValue(), faker.random().nextInt(99999));
                    c.setContainerCode(code);

                    c.setContainerStatus(ContainerStatus.PENDING);
                    c.setDepartureDate(LocalDateTime.now().minusDays(faker.number().numberBetween(1, 10)));
                    c.setArrivalDate(LocalDateTime.now().plusDays(faker.number().numberBetween(1, 10)));

                    // Ghi ch√∫ s√°t nghƒ©a h∆°n
                    String[] notes = {
                            "ƒêang v·∫≠n chuy·ªÉn ƒë·∫øn kho ƒë√≠ch",
                            "Ch·ªù ch·∫•t h√†ng t·∫°i kho xu·∫•t",
                            "ƒê√£ kh·ªüi h√†nh, ƒëang tr√™n ƒë∆∞·ªùng",
                            "Ch∆∞a ho√†n th√†nh ki·ªÉm k√™",
                            "H√†ng ƒë√£ t·ªõi kho, ch·ªù nh·∫≠p kho"
                    };
                    c.setNote(notes[faker.random().nextInt(notes.length)]);

                    // G√°n from/to warehouse theo ƒë√∫ng lo·∫°i
                    Warehouse to = warehouseDestinations.get(faker.random().nextInt(warehouseDestinations.size()));
                    c.setFromWareHouseId(warehouse.getId());
                    c.setToWarehouseId(to.getId());
                    containers.add(c);
                }
            }

            String[] descriptionSpareParts = {
                    "·∫Æc quy xe n√¢ng ƒëi·ªán ‚Äì Ngu·ªìn cung c·∫•p nƒÉng l∆∞·ª£ng ch√≠nh cho to√†n b·ªô h·ªá th·ªëng v·∫≠n h√†nh",
                    "B·ªô s·∫°c ·∫Øc quy ‚Äì Thi·∫øt b·ªã n·∫°p ƒëi·ªán cho pin xe n√¢ng, ƒë·∫£m b·∫£o hi·ªáu su·∫•t ho·∫°t ƒë·ªông",
                    "ƒê·ªông c∆° ƒëi·ªán ‚Äì T·∫°o l·ª±c di chuy·ªÉn v√† n√¢ng h·∫° cho xe",
                    "B√°nh xe PU/Nylon ‚Äì B√°nh chuy√™n d·ª•ng ch·ªãu t·∫£i n·∫∑ng, gi·∫£m ma s√°t v√† √™m khi v·∫≠n h√†nh",
                    "B·ªô ƒëi·ªÅu khi·ªÉn (Controller) ‚Äì Qu·∫£n l√Ω d√≤ng ƒëi·ªán, t·ªëc ƒë·ªô v√† h∆∞·ªõng di chuy·ªÉn",
                    "B∆°m th·ªßy l·ª±c ‚Äì T·∫°o √°p l·ª±c ƒë·ªÉ n√¢ng h·∫° c√†ng n√¢ng v√† h√†ng h√≥a",
                    "C√†ng n√¢ng (Fork) ‚Äì B·ªô ph·∫≠n tr·ª±c ti·∫øp n√¢ng ƒë·ª° v√† di chuy·ªÉn pallet h√†ng",
                    "X√≠ch n√¢ng (Lift Chain) ‚Äì Truy·ªÅn ƒë·ªông gi·ªØa xi lanh v√† khung n√¢ng ƒë·ªÉ n√¢ng h·∫°",
                    "Gh·∫ø ng·ªìi & d√¢y an to√†n ‚Äì ƒê·∫£m b·∫£o s·ª± tho·∫£i m√°i v√† an to√†n cho ng∆∞·ªùi v·∫≠n h√†nh",
                    "B·ªô ƒë√®n t√≠n hi·ªáu & c√≤i ‚Äì H·ªó tr·ª£ c·∫£nh b√°o v√† an to√†n trong qu√° tr√¨nh v·∫≠n h√†nh"
            };

            String poNumber = "";
            String productCode = "";
            for (int j = 0; j < 40; j++) {
                InventoryItem item = new InventoryItem();
                item.setId(new ObjectId());
                if(j % 4 == 0){
                    poNumber = String.format("PO-%s-%d", LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMddHHmmss")), faker.random().nextInt(9999));
                    productCode = String.format("PRC-%d-%d", currentYear, faker.random().nextInt(999999));
                    item.setQuantity(1);
                    item.setPoNumber(poNumber);
                    item.setProductCode(productCode);
                    item.setInventoryType(InventoryType.VEHICLE.getId());
                    item.setSerialNumber("SERIAL_" + faker.number().digits(6));
                    item.setCategory(faker.random().nextInt(5) % 2 == 0 ? "Ng·ªìi l√°i" : "ƒê·ª©ng l√°i");
                    item.setManufacturingYear(2020 + faker.random().nextInt(5));
                }
                else{
                    item.setQuantity(faker.number().numberBetween(j + 1, (j + 1) * 10));
                    item.setPoNumber(poNumber);
                    item.setCommodityCode(String.format("CDC-%d-%d", currentYear, faker.random().nextInt(99999999)));
                    item.setDescription(descriptionSpareParts[faker.random().nextInt(descriptionSpareParts.length)]);
                    item.setInventoryType(InventoryType.SPARE_PART.getId());
                }
                item.setModel("Model " + faker.letterify("M-???"));

                item.setStatus(InventoryItemStatus.IN_STOCK);

                // G√°n warehouse/container ng·∫´u nhi√™n
                item.setWarehouseId(warehouse.getId());

                item.setInitialCondition("M·ªõi");
                String[] ghiChuMau = {
                        "H√†ng m·ªõi v·ªÅ, ch∆∞a ki·ªÉm tra",
                        "C·∫ßn ki·ªÉm tra th√¥ng s·ªë b√¨nh",
                        "Ch·ªù ki·ªÉm ƒë·ªãnh ch·∫•t l∆∞·ª£ng",
                        "H√†ng ƒë√£ b√°n, ch·ªù xu·∫•t kho",
                        "ƒê√£ qua s·ª≠ d·ª•ng, c·∫ßn b·∫£o d∆∞·ª°ng",
                        "S·∫£n ph·∫©m l·ªói nh·∫π, c·∫ßn s·ª≠a ch·ªØa",
                        "Thi·∫øt b·ªã c√≤n nguy√™n ƒëai ki·ªán",
                        "B·∫£o qu·∫£n trong kho m√°t",
                        "S·∫Øp h·∫øt h·∫°n b·∫£o h√†nh",
                        "Ph·ª• t√πng ƒëi k√®m ƒë·∫ßy ƒë·ªß"
                };

                item.setNotes(ghiChuMau[faker.random().nextInt(ghiChuMau.length)]);
                item.setCreatedAt(LocalDateTime.now());
                item.setUpdatedAt(LocalDateTime.now());

                items.add(item);
                // Specifications
                InventoryItem.Specifications specs = new InventoryItem.Specifications(
                        faker.number().numberBetween(1000, 5000), // liftingCapacityKg
                        "Khung " + faker.letterify("??"),         // chassisType
                        faker.number().numberBetween(2000, 7000), // liftingHeightMm
                        "ƒê·ªông c∆° " + faker.letterify("??"),       // engineType
                        "B√¨nh ƒëi·ªán " + faker.bothify("??-###"),   // batteryInfo
                        "Th√¥ng s·ªë b√¨nh " + faker.bothify("??-##"),// batterySpecification
                        "Th√¥ng s·ªë s·∫°c " + faker.bothify("??-##"), // chargerSpecification
                        "",
                        faker.number().numberBetween(2, 6),       // valveCount
                        faker.bool().bool(),                      // hasSideShift
                        faker.lorem().sentence()                  // otherDetails
                );
                item.setSpecifications(specs);

// Pricing
                InventoryItem.Pricing pricing = new InventoryItem.Pricing(
                        BigDecimal.valueOf(faker.number().randomDouble(2, 100, 500)),  // purchasePrice
                        BigDecimal.valueOf(faker.number().randomDouble(2, 550, 650)),  // salePriceR0
                        BigDecimal.valueOf(faker.number().randomDouble(2, 700, 800)),  // salePriceR1
                        BigDecimal.valueOf(faker.number().randomDouble(2, 600, 900)),  // actualSalePrice
                        "ƒê·∫°i l√Ω " + faker.company().name()                             // agent
                );
                item.setPricing(pricing);

// Logistics
                InventoryItem.Logistics logistics = new InventoryItem.Logistics(
                        LocalDateTime.now().minusDays(faker.number().numberBetween(30, 60)), // orderDate
                        LocalDateTime.now().minusDays(faker.number().numberBetween(15, 29)), // departureDate
                        LocalDateTime.now().minusDays(faker.number().numberBetween(1, 14)),  // arrivalDate
                        faker.bool().bool() ? LocalDateTime.now().minusDays(faker.number().numberBetween(1, 10)) : null, // consignmentDate,
                        LocalDateTime.now().minusDays(faker.number().numberBetween(25, 50)), // plannedProductionDate
                        LocalDateTime.now().minusDays(faker.number().numberBetween(16, 28)) // estimateCompletionDate
                );
                item.setLogistics(logistics);
            }


        }

        containerRepository.saveAll(containers);
        inventoryItemRepository.saveAll(items);

        return ResponseEntity.ok("‚úÖ ƒê√£ t·∫°o fake data: " +
                warehouses.size() + " warehouses, " +
                containers.size() + " containers, " +
                items.size() + " inventory items.");
    }


}
